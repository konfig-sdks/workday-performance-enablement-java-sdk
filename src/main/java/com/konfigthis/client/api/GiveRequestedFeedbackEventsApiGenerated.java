/*
 * performanceEnablement
 * The Performance Management service enables applications to access and create feedback about workers in the system.
 *
 * The version of the OpenAPI document: v5
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AboutWorkerD396fd5bffec1000100f44a5808f0005;
import com.konfigthis.client.model.BusinessProcessParametersD396fd5bffec1000100f440bde4c0001;
import com.konfigthis.client.model.ERRORMODELREFERENCE;
import com.konfigthis.client.model.GiveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000;
import com.konfigthis.client.model.GiveRequestedFeedbackEventsGetCollectionFeedbackEventsResponse;
import java.time.LocalDate;
import com.konfigthis.client.model.RequestedByD396fd5bffec1000100f44a5808f0006;
import com.konfigthis.client.model.RequestedFeedbackCommentsD396fd5bffec10001393477e77870000;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class GiveRequestedFeedbackEventsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GiveRequestedFeedbackEventsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public GiveRequestedFeedbackEventsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getCollectionFeedbackEventsCall(Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/giveRequestedFeedbackEvents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCollectionFeedbackEventsValidateBeforeCall(Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        return getCollectionFeedbackEventsCall(limit, offset, _callback);

    }


    private ApiResponse<GiveRequestedFeedbackEventsGetCollectionFeedbackEventsResponse> getCollectionFeedbackEventsWithHttpInfo(Long limit, Long offset) throws ApiException {
        okhttp3.Call localVarCall = getCollectionFeedbackEventsValidateBeforeCall(limit, offset, null);
        Type localVarReturnType = new TypeToken<GiveRequestedFeedbackEventsGetCollectionFeedbackEventsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCollectionFeedbackEventsAsync(Long limit, Long offset, final ApiCallback<GiveRequestedFeedbackEventsGetCollectionFeedbackEventsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCollectionFeedbackEventsValidateBeforeCall(limit, offset, _callback);
        Type localVarReturnType = new TypeToken<GiveRequestedFeedbackEventsGetCollectionFeedbackEventsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCollectionFeedbackEventsRequestBuilder {
        private Long limit;
        private Long offset;

        private GetCollectionFeedbackEventsRequestBuilder() {
        }

        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default is 20. The maximum is 100. (optional)
         * @return GetCollectionFeedbackEventsRequestBuilder
         */
        public GetCollectionFeedbackEventsRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetCollectionFeedbackEventsRequestBuilder
         */
        public GetCollectionFeedbackEventsRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getCollectionFeedbackEvents
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCollectionFeedbackEventsCall(limit, offset, _callback);
        }


        /**
         * Execute getCollectionFeedbackEvents request
         * @return GiveRequestedFeedbackEventsGetCollectionFeedbackEventsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public GiveRequestedFeedbackEventsGetCollectionFeedbackEventsResponse execute() throws ApiException {
            ApiResponse<GiveRequestedFeedbackEventsGetCollectionFeedbackEventsResponse> localVarResp = getCollectionFeedbackEventsWithHttpInfo(limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCollectionFeedbackEvents request with HTTP info returned
         * @return ApiResponse&lt;GiveRequestedFeedbackEventsGetCollectionFeedbackEventsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GiveRequestedFeedbackEventsGetCollectionFeedbackEventsResponse> executeWithHttpInfo() throws ApiException {
            return getCollectionFeedbackEventsWithHttpInfo(limit, offset);
        }

        /**
         * Execute getCollectionFeedbackEvents request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GiveRequestedFeedbackEventsGetCollectionFeedbackEventsResponse> _callback) throws ApiException {
            return getCollectionFeedbackEventsAsync(limit, offset, _callback);
        }
    }

    /**
     * Retrieves a collection of feedback given events about the user that responded to the feedback request.
     * Retrieves all requested feedback given events for the user that responded to the feedback request.  Secured by: Self-Service: Role Requested Feedback, Self-Service: Self Requested Feedback  Scope: Performance Enablement, Worker Profile and Skills
     * @return GetCollectionFeedbackEventsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetCollectionFeedbackEventsRequestBuilder getCollectionFeedbackEvents() throws IllegalArgumentException {
        return new GetCollectionFeedbackEventsRequestBuilder();
    }
    private okhttp3.Call getInstanceCall(String ID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/giveRequestedFeedbackEvents/{ID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInstanceValidateBeforeCall(String ID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getInstance(Async)");
        }

        return getInstanceCall(ID, _callback);

    }


    private ApiResponse<GiveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000> getInstanceWithHttpInfo(String ID) throws ApiException {
        okhttp3.Call localVarCall = getInstanceValidateBeforeCall(ID, null);
        Type localVarReturnType = new TypeToken<GiveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInstanceAsync(String ID, final ApiCallback<GiveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInstanceValidateBeforeCall(ID, _callback);
        Type localVarReturnType = new TypeToken<GiveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInstanceRequestBuilder {
        private final String ID;

        private GetInstanceRequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Build call for getInstance
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInstanceCall(ID, _callback);
        }


        /**
         * Execute getInstance request
         * @return GiveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public GiveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000 execute() throws ApiException {
            ApiResponse<GiveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000> localVarResp = getInstanceWithHttpInfo(ID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInstance request with HTTP info returned
         * @return ApiResponse&lt;GiveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GiveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000> executeWithHttpInfo() throws ApiException {
            return getInstanceWithHttpInfo(ID);
        }

        /**
         * Execute getInstance request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GiveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000> _callback) throws ApiException {
            return getInstanceAsync(ID, _callback);
        }
    }

    /**
     * Retrieves a single requested feedback given event instance with the specified ID of the user that responded to the feedback request.
     * Retrieves a single requested feedback given event instance for the user that responded to the feedback request.  Secured by: Self-Service: Role Requested Feedback, Self-Service: Self Requested Feedback  Scope: Performance Enablement, Worker Profile and Skills
     * @param ID The Workday ID of the resource. (required)
     * @return GetInstanceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetInstanceRequestBuilder getInstance(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new GetInstanceRequestBuilder(ID);
    }
    private okhttp3.Call updateEventCall(String ID, GiveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000 giveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = giveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000;

        // create path and map variables
        String localVarPath = "/giveRequestedFeedbackEvents/{ID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEventValidateBeforeCall(String ID, GiveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000 giveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling updateEvent(Async)");
        }

        // verify the required parameter 'giveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000' is set
        if (giveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000 == null) {
            throw new ApiException("Missing the required parameter 'giveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000' when calling updateEvent(Async)");
        }

        return updateEventCall(ID, giveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000, _callback);

    }


    private ApiResponse<GiveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000> updateEventWithHttpInfo(String ID, GiveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000 giveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000) throws ApiException {
        okhttp3.Call localVarCall = updateEventValidateBeforeCall(ID, giveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000, null);
        Type localVarReturnType = new TypeToken<GiveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateEventAsync(String ID, GiveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000 giveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000, final ApiCallback<GiveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateEventValidateBeforeCall(ID, giveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000, _callback);
        Type localVarReturnType = new TypeToken<GiveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateEventRequestBuilder {
        private final String ID;
        private LocalDate dueDate;
        private LocalDate feedbackGivenDate;
        private LocalDate feedbackCreationDate;
        private RequestedByD396fd5bffec1000100f44a5808f0006 requestedBy;
        private AboutWorkerD396fd5bffec1000100f44a5808f0005 aboutWorker;
        private LocalDate expirationDate;
        private Boolean displayNameofResponder;
        private List<RequestedFeedbackCommentsD396fd5bffec10001393477e77870000> feedbackComments;
        private BusinessProcessParametersD396fd5bffec1000100f440bde4c0001 businessProcessParameters;
        private Boolean feedbackPrivate;
        private Boolean feedbackConfidential;
        private String id;
        private String descriptor;

        private UpdateEventRequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Set dueDate
         * @param dueDate The date the business process needs to be completed. (optional)
         * @return UpdateEventRequestBuilder
         */
        public UpdateEventRequestBuilder dueDate(LocalDate dueDate) {
            this.dueDate = dueDate;
            return this;
        }
        
        /**
         * Set feedbackGivenDate
         * @param feedbackGivenDate The date the feedback was provided. (optional)
         * @return UpdateEventRequestBuilder
         */
        public UpdateEventRequestBuilder feedbackGivenDate(LocalDate feedbackGivenDate) {
            this.feedbackGivenDate = feedbackGivenDate;
            return this;
        }
        
        /**
         * Set feedbackCreationDate
         * @param feedbackCreationDate The date the feedback event was created. (optional)
         * @return UpdateEventRequestBuilder
         */
        public UpdateEventRequestBuilder feedbackCreationDate(LocalDate feedbackCreationDate) {
            this.feedbackCreationDate = feedbackCreationDate;
            return this;
        }
        
        /**
         * Set requestedBy
         * @param requestedBy  (optional)
         * @return UpdateEventRequestBuilder
         */
        public UpdateEventRequestBuilder requestedBy(RequestedByD396fd5bffec1000100f44a5808f0006 requestedBy) {
            this.requestedBy = requestedBy;
            return this;
        }
        
        /**
         * Set aboutWorker
         * @param aboutWorker  (optional)
         * @return UpdateEventRequestBuilder
         */
        public UpdateEventRequestBuilder aboutWorker(AboutWorkerD396fd5bffec1000100f44a5808f0005 aboutWorker) {
            this.aboutWorker = aboutWorker;
            return this;
        }
        
        /**
         * Set expirationDate
         * @param expirationDate The date the feedback request expires. (optional)
         * @return UpdateEventRequestBuilder
         */
        public UpdateEventRequestBuilder expirationDate(LocalDate expirationDate) {
            this.expirationDate = expirationDate;
            return this;
        }
        
        /**
         * Set displayNameofResponder
         * @param displayNameofResponder True if the feedback provider&#39;s name is not displayed. (optional)
         * @return UpdateEventRequestBuilder
         */
        public UpdateEventRequestBuilder displayNameofResponder(Boolean displayNameofResponder) {
            this.displayNameofResponder = displayNameofResponder;
            return this;
        }
        
        /**
         * Set feedbackComments
         * @param feedbackComments The feedback comments for this feedback event. To include feedback comments in reports or notifications intended for Employees, use Feedback Comments for Self-Service Reporting instead. (optional)
         * @return UpdateEventRequestBuilder
         */
        public UpdateEventRequestBuilder feedbackComments(List<RequestedFeedbackCommentsD396fd5bffec10001393477e77870000> feedbackComments) {
            this.feedbackComments = feedbackComments;
            return this;
        }
        
        /**
         * Set businessProcessParameters
         * @param businessProcessParameters  (optional)
         * @return UpdateEventRequestBuilder
         */
        public UpdateEventRequestBuilder businessProcessParameters(BusinessProcessParametersD396fd5bffec1000100f440bde4c0001 businessProcessParameters) {
            this.businessProcessParameters = businessProcessParameters;
            return this;
        }
        
        /**
         * Set feedbackPrivate
         * @param feedbackPrivate Yes if the feedback is private between the feedback provider and the worker. (optional)
         * @return UpdateEventRequestBuilder
         */
        public UpdateEventRequestBuilder feedbackPrivate(Boolean feedbackPrivate) {
            this.feedbackPrivate = feedbackPrivate;
            return this;
        }
        
        /**
         * Set feedbackConfidential
         * @param feedbackConfidential Yes if the feedback is confidential between the feedback provider and the manager. Employees, or who the feedback is about, don&#39;t see confidential feedback. (optional)
         * @return UpdateEventRequestBuilder
         */
        public UpdateEventRequestBuilder feedbackConfidential(Boolean feedbackConfidential) {
            this.feedbackConfidential = feedbackConfidential;
            return this;
        }
        
        /**
         * Set id
         * @param id Id of the instance (optional)
         * @return UpdateEventRequestBuilder
         */
        public UpdateEventRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set descriptor
         * @param descriptor A preview of the instance (optional)
         * @return UpdateEventRequestBuilder
         */
        public UpdateEventRequestBuilder descriptor(String descriptor) {
            this.descriptor = descriptor;
            return this;
        }
        
        /**
         * Build call for updateEvent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            GiveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000 giveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000 = buildBodyParams();
            return updateEventCall(ID, giveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000, _callback);
        }

        private GiveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000 buildBodyParams() {
            GiveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000 giveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000 = new GiveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000();
            return giveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000;
        }

        /**
         * Execute updateEvent request
         * @return GiveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public GiveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000 execute() throws ApiException {
            GiveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000 giveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000 = buildBodyParams();
            ApiResponse<GiveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000> localVarResp = updateEventWithHttpInfo(ID, giveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateEvent request with HTTP info returned
         * @return ApiResponse&lt;GiveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GiveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000> executeWithHttpInfo() throws ApiException {
            GiveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000 giveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000 = buildBodyParams();
            return updateEventWithHttpInfo(ID, giveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000);
        }

        /**
         * Execute updateEvent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GiveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000> _callback) throws ApiException {
            GiveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000 giveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000 = buildBodyParams();
            return updateEventAsync(ID, giveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000, _callback);
        }
    }

    /**
     * Updates the Give Requested Feedback Event that matches the WID in the url, and the current authenticated user is a responder for the event.
     * Updates the Give Requested Feedback Event that matches the WID in the url, and the current authenticated user is a responder for the event. This endpoint is equivalent to the Give Requested Feedback task in Workday.  Secured by: Give Requested Feedback REST+TG  Scope: Performance Enablement, Worker Profile and Skills
     * @param ID The Workday ID of the resource. (required)
     * @param giveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000  (required)
     * @return UpdateEventRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateEventRequestBuilder updateEvent(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new UpdateEventRequestBuilder(ID);
    }
}
