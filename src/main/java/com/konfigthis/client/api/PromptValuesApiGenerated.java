/*
 * performanceEnablement
 * The Performance Management service enables applications to access and create feedback about workers in the system.
 *
 * The version of the OpenAPI document: v5
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ERRORMODELREFERENCE;
import com.konfigthis.client.model.MULTIPLEINSTANCEMODELREFERENCE;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PromptValuesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PromptValuesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PromptValuesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getInstancesCall(Long limit, Long offset, List<String> workers, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/values/workersToNotify/workersToNotify";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (workers != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "workers", workers));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInstancesValidateBeforeCall(Long limit, Long offset, List<String> workers, final ApiCallback _callback) throws ApiException {
        return getInstancesCall(limit, offset, workers, _callback);

    }


    private ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> getInstancesWithHttpInfo(Long limit, Long offset, List<String> workers) throws ApiException {
        okhttp3.Call localVarCall = getInstancesValidateBeforeCall(limit, offset, workers, null);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInstancesAsync(Long limit, Long offset, List<String> workers, final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInstancesValidateBeforeCall(limit, offset, workers, _callback);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInstancesRequestBuilder {
        private Long limit;
        private Long offset;
        private List<String> workers;

        private GetInstancesRequestBuilder() {
        }

        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default and maximum is 1000. (optional)
         * @return GetInstancesRequestBuilder
         */
        public GetInstancesRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetInstancesRequestBuilder
         */
        public GetInstancesRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set workers
         * @param workers  (optional)
         * @return GetInstancesRequestBuilder
         */
        public GetInstancesRequestBuilder workers(List<String> workers) {
            this.workers = workers;
            return this;
        }
        
        /**
         * Build call for getInstances
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInstancesCall(limit, offset, workers, _callback);
        }


        /**
         * Execute getInstances request
         * @return MULTIPLEINSTANCEMODELREFERENCE
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public MULTIPLEINSTANCEMODELREFERENCE execute() throws ApiException {
            ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> localVarResp = getInstancesWithHttpInfo(limit, offset, workers);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInstances request with HTTP info returned
         * @return ApiResponse&lt;MULTIPLEINSTANCEMODELREFERENCE&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> executeWithHttpInfo() throws ApiException {
            return getInstancesWithHttpInfo(limit, offset, workers);
        }

        /**
         * Execute getInstances request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {
            return getInstancesAsync(limit, offset, workers, _callback);
        }
    }

    /**
     * 
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @return GetInstancesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetInstancesRequestBuilder getInstances() throws IllegalArgumentException {
        return new GetInstancesRequestBuilder();
    }
    private okhttp3.Call getInstances_0Call(Long limit, Long offset, String templateType, String worker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/values/feedbackTemplate/feedbackTemplate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (templateType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("templateType", templateType));
        }

        if (worker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("worker", worker));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInstances_0ValidateBeforeCall(Long limit, Long offset, String templateType, String worker, final ApiCallback _callback) throws ApiException {
        return getInstances_0Call(limit, offset, templateType, worker, _callback);

    }


    private ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> getInstances_0WithHttpInfo(Long limit, Long offset, String templateType, String worker) throws ApiException {
        okhttp3.Call localVarCall = getInstances_0ValidateBeforeCall(limit, offset, templateType, worker, null);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInstances_0Async(Long limit, Long offset, String templateType, String worker, final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInstances_0ValidateBeforeCall(limit, offset, templateType, worker, _callback);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInstances0RequestBuilder {
        private Long limit;
        private Long offset;
        private String templateType;
        private String worker;

        private GetInstances0RequestBuilder() {
        }

        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default and maximum is 1000. (optional)
         * @return GetInstances0RequestBuilder
         */
        public GetInstances0RequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetInstances0RequestBuilder
         */
        public GetInstances0RequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set templateType
         * @param templateType The feedback template type for this feedback event, either Feedback on Self, 133de7d11fea10001dbb45a701140098 or Feedback on Worker 133de7d11fea10001dbb45973dec0097. This field is required. (optional)
         * @return GetInstances0RequestBuilder
         */
        public GetInstances0RequestBuilder templateType(String templateType) {
            this.templateType = templateType;
            return this;
        }
        
        /**
         * Set worker
         * @param worker The worker WID. This field is required for the Feedback on Worker template and not supported for the Feedback on Self template. It can&#39;t be the processing worker. (optional)
         * @return GetInstances0RequestBuilder
         */
        public GetInstances0RequestBuilder worker(String worker) {
            this.worker = worker;
            return this;
        }
        
        /**
         * Build call for getInstances_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInstances_0Call(limit, offset, templateType, worker, _callback);
        }


        /**
         * Execute getInstances_0 request
         * @return MULTIPLEINSTANCEMODELREFERENCE
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public MULTIPLEINSTANCEMODELREFERENCE execute() throws ApiException {
            ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> localVarResp = getInstances_0WithHttpInfo(limit, offset, templateType, worker);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInstances_0 request with HTTP info returned
         * @return ApiResponse&lt;MULTIPLEINSTANCEMODELREFERENCE&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> executeWithHttpInfo() throws ApiException {
            return getInstances_0WithHttpInfo(limit, offset, templateType, worker);
        }

        /**
         * Execute getInstances_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {
            return getInstances_0Async(limit, offset, templateType, worker, _callback);
        }
    }

    /**
     * 
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @return GetInstances0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetInstances0RequestBuilder getInstances_0() throws IllegalArgumentException {
        return new GetInstances0RequestBuilder();
    }
    private okhttp3.Call getInstances_1Call(Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/values/feedbackOnWorker/feedbackOnWorker";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInstances_1ValidateBeforeCall(Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        return getInstances_1Call(limit, offset, _callback);

    }


    private ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> getInstances_1WithHttpInfo(Long limit, Long offset) throws ApiException {
        okhttp3.Call localVarCall = getInstances_1ValidateBeforeCall(limit, offset, null);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInstances_1Async(Long limit, Long offset, final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInstances_1ValidateBeforeCall(limit, offset, _callback);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInstances1RequestBuilder {
        private Long limit;
        private Long offset;

        private GetInstances1RequestBuilder() {
        }

        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default and maximum is 1000. (optional)
         * @return GetInstances1RequestBuilder
         */
        public GetInstances1RequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetInstances1RequestBuilder
         */
        public GetInstances1RequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getInstances_1
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInstances_1Call(limit, offset, _callback);
        }


        /**
         * Execute getInstances_1 request
         * @return MULTIPLEINSTANCEMODELREFERENCE
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public MULTIPLEINSTANCEMODELREFERENCE execute() throws ApiException {
            ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> localVarResp = getInstances_1WithHttpInfo(limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInstances_1 request with HTTP info returned
         * @return ApiResponse&lt;MULTIPLEINSTANCEMODELREFERENCE&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> executeWithHttpInfo() throws ApiException {
            return getInstances_1WithHttpInfo(limit, offset);
        }

        /**
         * Execute getInstances_1 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {
            return getInstances_1Async(limit, offset, _callback);
        }
    }

    /**
     * 
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @return GetInstances1RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetInstances1RequestBuilder getInstances_1() throws IllegalArgumentException {
        return new GetInstances1RequestBuilder();
    }
    private okhttp3.Call getInstances_2Call(Long limit, Long offset, String templateType, String worker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/values/feedbackResponder/feedbackResponder";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (templateType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("templateType", templateType));
        }

        if (worker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("worker", worker));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInstances_2ValidateBeforeCall(Long limit, Long offset, String templateType, String worker, final ApiCallback _callback) throws ApiException {
        return getInstances_2Call(limit, offset, templateType, worker, _callback);

    }


    private ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> getInstances_2WithHttpInfo(Long limit, Long offset, String templateType, String worker) throws ApiException {
        okhttp3.Call localVarCall = getInstances_2ValidateBeforeCall(limit, offset, templateType, worker, null);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInstances_2Async(Long limit, Long offset, String templateType, String worker, final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInstances_2ValidateBeforeCall(limit, offset, templateType, worker, _callback);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInstances2RequestBuilder {
        private Long limit;
        private Long offset;
        private String templateType;
        private String worker;

        private GetInstances2RequestBuilder() {
        }

        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default and maximum is 1000. (optional)
         * @return GetInstances2RequestBuilder
         */
        public GetInstances2RequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetInstances2RequestBuilder
         */
        public GetInstances2RequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set templateType
         * @param templateType The feedback template type for this feedback event, either Feedback on Self, 133de7d11fea10001dbb45a701140098 or Feedback on Worker 133de7d11fea10001dbb45973dec0097. This field is required. (optional)
         * @return GetInstances2RequestBuilder
         */
        public GetInstances2RequestBuilder templateType(String templateType) {
            this.templateType = templateType;
            return this;
        }
        
        /**
         * Set worker
         * @param worker The worker WID. This field is required for the Feedback on Worker templateType and not supported for the Feedback on Self templateType. It can&#39;t be the processing worker. (optional)
         * @return GetInstances2RequestBuilder
         */
        public GetInstances2RequestBuilder worker(String worker) {
            this.worker = worker;
            return this;
        }
        
        /**
         * Build call for getInstances_2
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInstances_2Call(limit, offset, templateType, worker, _callback);
        }


        /**
         * Execute getInstances_2 request
         * @return MULTIPLEINSTANCEMODELREFERENCE
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public MULTIPLEINSTANCEMODELREFERENCE execute() throws ApiException {
            ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> localVarResp = getInstances_2WithHttpInfo(limit, offset, templateType, worker);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInstances_2 request with HTTP info returned
         * @return ApiResponse&lt;MULTIPLEINSTANCEMODELREFERENCE&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> executeWithHttpInfo() throws ApiException {
            return getInstances_2WithHttpInfo(limit, offset, templateType, worker);
        }

        /**
         * Execute getInstances_2 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {
            return getInstances_2Async(limit, offset, templateType, worker, _callback);
        }
    }

    /**
     * 
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @return GetInstances2RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetInstances2RequestBuilder getInstances_2() throws IllegalArgumentException {
        return new GetInstances2RequestBuilder();
    }
    private okhttp3.Call getInstances_3Call(Long limit, Long offset, String relatesToTag, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/values/relatesTo/relatesTo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (relatesToTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relatesToTag", relatesToTag));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInstances_3ValidateBeforeCall(Long limit, Long offset, String relatesToTag, final ApiCallback _callback) throws ApiException {
        return getInstances_3Call(limit, offset, relatesToTag, _callback);

    }


    private ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> getInstances_3WithHttpInfo(Long limit, Long offset, String relatesToTag) throws ApiException {
        okhttp3.Call localVarCall = getInstances_3ValidateBeforeCall(limit, offset, relatesToTag, null);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInstances_3Async(Long limit, Long offset, String relatesToTag, final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInstances_3ValidateBeforeCall(limit, offset, relatesToTag, _callback);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInstances3RequestBuilder {
        private Long limit;
        private Long offset;
        private String relatesToTag;

        private GetInstances3RequestBuilder() {
        }

        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default and maximum is 1000. (optional)
         * @return GetInstances3RequestBuilder
         */
        public GetInstances3RequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetInstances3RequestBuilder
         */
        public GetInstances3RequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set relatesToTag
         * @param relatesToTag The talent tag linked to the feedback question. (optional)
         * @return GetInstances3RequestBuilder
         */
        public GetInstances3RequestBuilder relatesToTag(String relatesToTag) {
            this.relatesToTag = relatesToTag;
            return this;
        }
        
        /**
         * Build call for getInstances_3
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInstances_3Call(limit, offset, relatesToTag, _callback);
        }


        /**
         * Execute getInstances_3 request
         * @return MULTIPLEINSTANCEMODELREFERENCE
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public MULTIPLEINSTANCEMODELREFERENCE execute() throws ApiException {
            ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> localVarResp = getInstances_3WithHttpInfo(limit, offset, relatesToTag);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInstances_3 request with HTTP info returned
         * @return ApiResponse&lt;MULTIPLEINSTANCEMODELREFERENCE&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> executeWithHttpInfo() throws ApiException {
            return getInstances_3WithHttpInfo(limit, offset, relatesToTag);
        }

        /**
         * Execute getInstances_3 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {
            return getInstances_3Async(limit, offset, relatesToTag, _callback);
        }
    }

    /**
     * 
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @return GetInstances3RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetInstances3RequestBuilder getInstances_3() throws IllegalArgumentException {
        return new GetInstances3RequestBuilder();
    }
}
