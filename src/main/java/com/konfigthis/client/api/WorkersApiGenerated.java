/*
 * performanceEnablement
 * The Performance Management service enables applications to access and create feedback about workers in the system.
 *
 * The version of the OpenAPI document: v5
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.BadgeAfd6ac52d62510001357f891ccfd0003;
import com.konfigthis.client.model.BusinessProcessParameters2b4c8a6ca069100035b85907ae2c0000;
import com.konfigthis.client.model.BusinessProcessParameters4db9c44d36231000134c7a5b6f3b0000;
import com.konfigthis.client.model.BusinessProcessParametersAfd6ac52d6251000117d0a60ed8b0000;
import com.konfigthis.client.model.ERRORMODELREFERENCE;
import com.konfigthis.client.model.FeedbackAbout2b4c8a6ca069100035b85907ae2c0002;
import com.konfigthis.client.model.FeedbackAbout4db9c44d36231000134c7b8eb3800003;
import com.konfigthis.client.model.FeedbackEventDetailAfd6ac52d62510001086b5c85cd50000;
import com.konfigthis.client.model.FeedbackRespondersFfdd5de32f7f100016dbb1b188d70000;
import com.konfigthis.client.model.FeedbackTemplate2b4c8a6ca069100035b859a141200001;
import com.konfigthis.client.model.FeedbackTemplate4db9c44d36231000134c7b8eb3800000;
import com.konfigthis.client.model.FromWorkerAfd6ac52d62510001357f891ccfd0001;
import com.konfigthis.client.model.GetWorkersFeedbackAlsoAbout3ab333661034100010b5635b2f7a0302;
import com.konfigthis.client.model.GoalsSummary2c793e888bcd100033e663075a2b0000;
import java.time.LocalDate;
import com.konfigthis.client.model.RelatedFeedbackEvents9708c966f04f10000e1e9b7f9a5c0000;
import com.konfigthis.client.model.RelatesTo9d12ad407f0f10001c3949add7d40000;
import com.konfigthis.client.model.RequestedFeedbackOnSelfEventDetail19acce0101b310002e6bf03e1bbc0000;
import com.konfigthis.client.model.RequestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000;
import com.konfigthis.client.model.RequestedFeedbackQuestionFfdd5de32f7f1000144df0c21e640000;
import com.konfigthis.client.model.ToWorkerF4946919a39f10000f03207b1f230000;
import com.konfigthis.client.model.WorkerDataC2466b0778c610000d1936006720000e;
import com.konfigthis.client.model.WorkersGetCollectionStaffingResponse;
import com.konfigthis.client.model.WorkersGetFeedbackEventsResponse;
import com.konfigthis.client.model.WorkersGetGoalsResponse;
import com.konfigthis.client.model.WorkersGetRequestedFeedbackEventsResponse;
import com.konfigthis.client.model.WorkersGetSelfRequestedFeedbackResponse;
import com.konfigthis.client.model.WorkersToNotify9e478586f65410001035b6c26a4c0000;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class WorkersApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WorkersApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public WorkersApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createFeedbackEventCall(String ID, FeedbackEventDetailAfd6ac52d62510001086b5c85cd50000 feedbackEventDetailAfd6ac52d62510001086b5c85cd50000, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = feedbackEventDetailAfd6ac52d62510001086b5c85cd50000;

        // create path and map variables
        String localVarPath = "/workers/{ID}/anytimeFeedbackEvents"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createFeedbackEventValidateBeforeCall(String ID, FeedbackEventDetailAfd6ac52d62510001086b5c85cd50000 feedbackEventDetailAfd6ac52d62510001086b5c85cd50000, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling createFeedbackEvent(Async)");
        }

        // verify the required parameter 'feedbackEventDetailAfd6ac52d62510001086b5c85cd50000' is set
        if (feedbackEventDetailAfd6ac52d62510001086b5c85cd50000 == null) {
            throw new ApiException("Missing the required parameter 'feedbackEventDetailAfd6ac52d62510001086b5c85cd50000' when calling createFeedbackEvent(Async)");
        }

        return createFeedbackEventCall(ID, feedbackEventDetailAfd6ac52d62510001086b5c85cd50000, _callback);

    }


    private ApiResponse<FeedbackEventDetailAfd6ac52d62510001086b5c85cd50000> createFeedbackEventWithHttpInfo(String ID, FeedbackEventDetailAfd6ac52d62510001086b5c85cd50000 feedbackEventDetailAfd6ac52d62510001086b5c85cd50000) throws ApiException {
        okhttp3.Call localVarCall = createFeedbackEventValidateBeforeCall(ID, feedbackEventDetailAfd6ac52d62510001086b5c85cd50000, null);
        Type localVarReturnType = new TypeToken<FeedbackEventDetailAfd6ac52d62510001086b5c85cd50000>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createFeedbackEventAsync(String ID, FeedbackEventDetailAfd6ac52d62510001086b5c85cd50000 feedbackEventDetailAfd6ac52d62510001086b5c85cd50000, final ApiCallback<FeedbackEventDetailAfd6ac52d62510001086b5c85cd50000> _callback) throws ApiException {

        okhttp3.Call localVarCall = createFeedbackEventValidateBeforeCall(ID, feedbackEventDetailAfd6ac52d62510001086b5c85cd50000, _callback);
        Type localVarReturnType = new TypeToken<FeedbackEventDetailAfd6ac52d62510001086b5c85cd50000>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateFeedbackEventRequestBuilder {
        private final String ID;
        private ToWorkerF4946919a39f10000f03207b1f230000 toWorker;
        private List<WorkersToNotify9e478586f65410001035b6c26a4c0000> workersToNotify;
        private RelatesTo9d12ad407f0f10001c3949add7d40000 relatesTo;
        private BusinessProcessParametersAfd6ac52d6251000117d0a60ed8b0000 businessProcessParameters;
        private List<GetWorkersFeedbackAlsoAbout3ab333661034100010b5635b2f7a0302> feedbackAlsoAbout;
        private Boolean hiddenFromWorker;
        private Boolean hiddenFromManager;
        private String comment;
        private FromWorkerAfd6ac52d62510001357f891ccfd0001 fromWorker;
        private BadgeAfd6ac52d62510001357f891ccfd0003 badge;
        private List<RelatedFeedbackEvents9708c966f04f10000e1e9b7f9a5c0000> relatedFeedbackEvents;
        private LocalDate feedbackGivenDate;
        private Boolean showFeedbackProviderName;
        private String href;
        private String id;
        private String descriptor;

        private CreateFeedbackEventRequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Set toWorker
         * @param toWorker  (optional)
         * @return CreateFeedbackEventRequestBuilder
         */
        public CreateFeedbackEventRequestBuilder toWorker(ToWorkerF4946919a39f10000f03207b1f230000 toWorker) {
            this.toWorker = toWorker;
            return this;
        }
        
        /**
         * Set workersToNotify
         * @param workersToNotify The workers that were selected to be notified of the feedback given event. (optional)
         * @return CreateFeedbackEventRequestBuilder
         */
        public CreateFeedbackEventRequestBuilder workersToNotify(List<WorkersToNotify9e478586f65410001035b6c26a4c0000> workersToNotify) {
            this.workersToNotify = workersToNotify;
            return this;
        }
        
        /**
         * Set relatesTo
         * @param relatesTo  (optional)
         * @return CreateFeedbackEventRequestBuilder
         */
        public CreateFeedbackEventRequestBuilder relatesTo(RelatesTo9d12ad407f0f10001c3949add7d40000 relatesTo) {
            this.relatesTo = relatesTo;
            return this;
        }
        
        /**
         * Set businessProcessParameters
         * @param businessProcessParameters  (optional)
         * @return CreateFeedbackEventRequestBuilder
         */
        public CreateFeedbackEventRequestBuilder businessProcessParameters(BusinessProcessParametersAfd6ac52d6251000117d0a60ed8b0000 businessProcessParameters) {
            this.businessProcessParameters = businessProcessParameters;
            return this;
        }
        
        /**
         * Set feedbackAlsoAbout
         * @param feedbackAlsoAbout The other workers this feedback event is about. (optional)
         * @return CreateFeedbackEventRequestBuilder
         */
        public CreateFeedbackEventRequestBuilder feedbackAlsoAbout(List<GetWorkersFeedbackAlsoAbout3ab333661034100010b5635b2f7a0302> feedbackAlsoAbout) {
            this.feedbackAlsoAbout = feedbackAlsoAbout;
            return this;
        }
        
        /**
         * Set hiddenFromWorker
         * @param hiddenFromWorker True if the feedback event is confidential between the feedback provider and the manager. Workers don&#39;t see confidential feedback. (optional)
         * @return CreateFeedbackEventRequestBuilder
         */
        public CreateFeedbackEventRequestBuilder hiddenFromWorker(Boolean hiddenFromWorker) {
            this.hiddenFromWorker = hiddenFromWorker;
            return this;
        }
        
        /**
         * Set hiddenFromManager
         * @param hiddenFromManager True if the feedback event is private between the feedback provider and the worker. Private feedback isn&#39;t shared with managers. (optional)
         * @return CreateFeedbackEventRequestBuilder
         */
        public CreateFeedbackEventRequestBuilder hiddenFromManager(Boolean hiddenFromManager) {
            this.hiddenFromManager = hiddenFromManager;
            return this;
        }
        
        /**
         * Set comment
         * @param comment The comment text for an anytime feedback event. (optional)
         * @return CreateFeedbackEventRequestBuilder
         */
        public CreateFeedbackEventRequestBuilder comment(String comment) {
            this.comment = comment;
            return this;
        }
        
        /**
         * Set fromWorker
         * @param fromWorker  (optional)
         * @return CreateFeedbackEventRequestBuilder
         */
        public CreateFeedbackEventRequestBuilder fromWorker(FromWorkerAfd6ac52d62510001357f891ccfd0001 fromWorker) {
            this.fromWorker = fromWorker;
            return this;
        }
        
        /**
         * Set badge
         * @param badge  (optional)
         * @return CreateFeedbackEventRequestBuilder
         */
        public CreateFeedbackEventRequestBuilder badge(BadgeAfd6ac52d62510001357f891ccfd0003 badge) {
            this.badge = badge;
            return this;
        }
        
        /**
         * Set relatedFeedbackEvents
         * @param relatedFeedbackEvents The anytime feedback events for the multiple recipients event. (optional)
         * @return CreateFeedbackEventRequestBuilder
         */
        public CreateFeedbackEventRequestBuilder relatedFeedbackEvents(List<RelatedFeedbackEvents9708c966f04f10000e1e9b7f9a5c0000> relatedFeedbackEvents) {
            this.relatedFeedbackEvents = relatedFeedbackEvents;
            return this;
        }
        
        /**
         * Set feedbackGivenDate
         * @param feedbackGivenDate The date the feedback was provided. (optional)
         * @return CreateFeedbackEventRequestBuilder
         */
        public CreateFeedbackEventRequestBuilder feedbackGivenDate(LocalDate feedbackGivenDate) {
            this.feedbackGivenDate = feedbackGivenDate;
            return this;
        }
        
        /**
         * Set showFeedbackProviderName
         * @param showFeedbackProviderName True if the feedback provider&#39;s name has chosen to be displayed. Names not chosen to be displayed are not shared. (optional)
         * @return CreateFeedbackEventRequestBuilder
         */
        public CreateFeedbackEventRequestBuilder showFeedbackProviderName(Boolean showFeedbackProviderName) {
            this.showFeedbackProviderName = showFeedbackProviderName;
            return this;
        }
        
        /**
         * Set href
         * @param href A link to the instance (optional)
         * @return CreateFeedbackEventRequestBuilder
         */
        public CreateFeedbackEventRequestBuilder href(String href) {
            this.href = href;
            return this;
        }
        
        /**
         * Set id
         * @param id Id of the instance (optional)
         * @return CreateFeedbackEventRequestBuilder
         */
        public CreateFeedbackEventRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set descriptor
         * @param descriptor A preview of the instance (optional)
         * @return CreateFeedbackEventRequestBuilder
         */
        public CreateFeedbackEventRequestBuilder descriptor(String descriptor) {
            this.descriptor = descriptor;
            return this;
        }
        
        /**
         * Build call for createFeedbackEvent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            FeedbackEventDetailAfd6ac52d62510001086b5c85cd50000 feedbackEventDetailAfd6ac52d62510001086b5c85cd50000 = buildBodyParams();
            return createFeedbackEventCall(ID, feedbackEventDetailAfd6ac52d62510001086b5c85cd50000, _callback);
        }

        private FeedbackEventDetailAfd6ac52d62510001086b5c85cd50000 buildBodyParams() {
            FeedbackEventDetailAfd6ac52d62510001086b5c85cd50000 feedbackEventDetailAfd6ac52d62510001086b5c85cd50000 = new FeedbackEventDetailAfd6ac52d62510001086b5c85cd50000();
            return feedbackEventDetailAfd6ac52d62510001086b5c85cd50000;
        }

        /**
         * Execute createFeedbackEvent request
         * @return FeedbackEventDetailAfd6ac52d62510001086b5c85cd50000
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public FeedbackEventDetailAfd6ac52d62510001086b5c85cd50000 execute() throws ApiException {
            FeedbackEventDetailAfd6ac52d62510001086b5c85cd50000 feedbackEventDetailAfd6ac52d62510001086b5c85cd50000 = buildBodyParams();
            ApiResponse<FeedbackEventDetailAfd6ac52d62510001086b5c85cd50000> localVarResp = createFeedbackEventWithHttpInfo(ID, feedbackEventDetailAfd6ac52d62510001086b5c85cd50000);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createFeedbackEvent request with HTTP info returned
         * @return ApiResponse&lt;FeedbackEventDetailAfd6ac52d62510001086b5c85cd50000&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FeedbackEventDetailAfd6ac52d62510001086b5c85cd50000> executeWithHttpInfo() throws ApiException {
            FeedbackEventDetailAfd6ac52d62510001086b5c85cd50000 feedbackEventDetailAfd6ac52d62510001086b5c85cd50000 = buildBodyParams();
            return createFeedbackEventWithHttpInfo(ID, feedbackEventDetailAfd6ac52d62510001086b5c85cd50000);
        }

        /**
         * Execute createFeedbackEvent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FeedbackEventDetailAfd6ac52d62510001086b5c85cd50000> _callback) throws ApiException {
            FeedbackEventDetailAfd6ac52d62510001086b5c85cd50000 feedbackEventDetailAfd6ac52d62510001086b5c85cd50000 = buildBodyParams();
            return createFeedbackEventAsync(ID, feedbackEventDetailAfd6ac52d62510001086b5c85cd50000, _callback);
        }
    }

    /**
     * Creates a single feedback given event instance about the specified worker.
     * Creates a single instance of feedback for each of the specified workers with the provided data. The worker is specified by the Workday ID of the worker. You can use a returned id from GET /workers in the Staffing service /staffing.  If you want to see the status of conditionally hidden attributes for this request, call this method with the wd-metadata-api-version header. Set the header value to v1 (or the latest Workday Metadata API version). When you specify the wd-metadata-api-version header, this method returns the response metadata, instead of the actual data.  This endpoint is equivalent to the Give Feedback task in Workday. This endpoint initiates the Give Feedback business process or the Give Feedback to Multiple Recipients business process based on the request.  Secured by: Give Feedback  Scope: Performance Enablement, Worker Profile and Skills
     * @param ID The Workday ID of the resource. (required)
     * @param feedbackEventDetailAfd6ac52d62510001086b5c85cd50000  (required)
     * @return CreateFeedbackEventRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public CreateFeedbackEventRequestBuilder createFeedbackEvent(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new CreateFeedbackEventRequestBuilder(ID);
    }
    private okhttp3.Call getCollectionStaffingCall(Boolean includeTerminatedWorkers, Long limit, Long offset, String search, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeTerminatedWorkers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeTerminatedWorkers", includeTerminatedWorkers));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCollectionStaffingValidateBeforeCall(Boolean includeTerminatedWorkers, Long limit, Long offset, String search, final ApiCallback _callback) throws ApiException {
        return getCollectionStaffingCall(includeTerminatedWorkers, limit, offset, search, _callback);

    }


    private ApiResponse<WorkersGetCollectionStaffingResponse> getCollectionStaffingWithHttpInfo(Boolean includeTerminatedWorkers, Long limit, Long offset, String search) throws ApiException {
        okhttp3.Call localVarCall = getCollectionStaffingValidateBeforeCall(includeTerminatedWorkers, limit, offset, search, null);
        Type localVarReturnType = new TypeToken<WorkersGetCollectionStaffingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCollectionStaffingAsync(Boolean includeTerminatedWorkers, Long limit, Long offset, String search, final ApiCallback<WorkersGetCollectionStaffingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCollectionStaffingValidateBeforeCall(includeTerminatedWorkers, limit, offset, search, _callback);
        Type localVarReturnType = new TypeToken<WorkersGetCollectionStaffingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCollectionStaffingRequestBuilder {
        private Boolean includeTerminatedWorkers;
        private Long limit;
        private Long offset;
        private String search;

        private GetCollectionStaffingRequestBuilder() {
        }

        /**
         * Set includeTerminatedWorkers
         * @param includeTerminatedWorkers Include terminated workers in the output (optional)
         * @return GetCollectionStaffingRequestBuilder
         */
        public GetCollectionStaffingRequestBuilder includeTerminatedWorkers(Boolean includeTerminatedWorkers) {
            this.includeTerminatedWorkers = includeTerminatedWorkers;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default is 20. The maximum is 100. (optional)
         * @return GetCollectionStaffingRequestBuilder
         */
        public GetCollectionStaffingRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetCollectionStaffingRequestBuilder
         */
        public GetCollectionStaffingRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set search
         * @param search Searches workers by name or worker ID. The search is case-insensitive. You can include space-delimited search strings for an OR search. (optional)
         * @return GetCollectionStaffingRequestBuilder
         */
        public GetCollectionStaffingRequestBuilder search(String search) {
            this.search = search;
            return this;
        }
        
        /**
         * Build call for getCollectionStaffing
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCollectionStaffingCall(includeTerminatedWorkers, limit, offset, search, _callback);
        }


        /**
         * Execute getCollectionStaffing request
         * @return WorkersGetCollectionStaffingResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public WorkersGetCollectionStaffingResponse execute() throws ApiException {
            ApiResponse<WorkersGetCollectionStaffingResponse> localVarResp = getCollectionStaffingWithHttpInfo(includeTerminatedWorkers, limit, offset, search);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCollectionStaffing request with HTTP info returned
         * @return ApiResponse&lt;WorkersGetCollectionStaffingResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkersGetCollectionStaffingResponse> executeWithHttpInfo() throws ApiException {
            return getCollectionStaffingWithHttpInfo(includeTerminatedWorkers, limit, offset, search);
        }

        /**
         * Execute getCollectionStaffing request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkersGetCollectionStaffingResponse> _callback) throws ApiException {
            return getCollectionStaffingAsync(includeTerminatedWorkers, limit, offset, search, _callback);
        }
    }

    /**
     * Retrieves a collection of workers and current staffing information.
     * Retrieves a collection of workers and current staffing information.  Secured by: Self-Service: Current Staffing Information, Worker Data: Public Worker Reports  Scope: Staffing
     * @return GetCollectionStaffingRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetCollectionStaffingRequestBuilder getCollectionStaffing() throws IllegalArgumentException {
        return new GetCollectionStaffingRequestBuilder();
    }
    private okhttp3.Call getFeedbackEventCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workers/{ID}/anytimeFeedbackEvents/{subresourceID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFeedbackEventValidateBeforeCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getFeedbackEvent(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling getFeedbackEvent(Async)");
        }

        return getFeedbackEventCall(ID, subresourceID, _callback);

    }


    private ApiResponse<FeedbackEventDetailAfd6ac52d62510001086b5c85cd50000> getFeedbackEventWithHttpInfo(String ID, String subresourceID) throws ApiException {
        okhttp3.Call localVarCall = getFeedbackEventValidateBeforeCall(ID, subresourceID, null);
        Type localVarReturnType = new TypeToken<FeedbackEventDetailAfd6ac52d62510001086b5c85cd50000>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFeedbackEventAsync(String ID, String subresourceID, final ApiCallback<FeedbackEventDetailAfd6ac52d62510001086b5c85cd50000> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFeedbackEventValidateBeforeCall(ID, subresourceID, _callback);
        Type localVarReturnType = new TypeToken<FeedbackEventDetailAfd6ac52d62510001086b5c85cd50000>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetFeedbackEventRequestBuilder {
        private final String ID;
        private final String subresourceID;

        private GetFeedbackEventRequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Build call for getFeedbackEvent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFeedbackEventCall(ID, subresourceID, _callback);
        }


        /**
         * Execute getFeedbackEvent request
         * @return FeedbackEventDetailAfd6ac52d62510001086b5c85cd50000
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public FeedbackEventDetailAfd6ac52d62510001086b5c85cd50000 execute() throws ApiException {
            ApiResponse<FeedbackEventDetailAfd6ac52d62510001086b5c85cd50000> localVarResp = getFeedbackEventWithHttpInfo(ID, subresourceID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getFeedbackEvent request with HTTP info returned
         * @return ApiResponse&lt;FeedbackEventDetailAfd6ac52d62510001086b5c85cd50000&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FeedbackEventDetailAfd6ac52d62510001086b5c85cd50000> executeWithHttpInfo() throws ApiException {
            return getFeedbackEventWithHttpInfo(ID, subresourceID);
        }

        /**
         * Execute getFeedbackEvent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FeedbackEventDetailAfd6ac52d62510001086b5c85cd50000> _callback) throws ApiException {
            return getFeedbackEventAsync(ID, subresourceID, _callback);
        }
    }

    /**
     * Retrieves a feedback given event instance with the specified ID.
     * Retrieves a single feedback given event instance with the specified ID.  This endpoint is equivalent to the View Feedback task in Workday.  Secured by: Self-Service: Anytime Feedback, Worker Data: Anytime Feedback  Scope: Performance Enablement, Worker Profile and Skills
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @return GetFeedbackEventRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetFeedbackEventRequestBuilder getFeedbackEvent(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new GetFeedbackEventRequestBuilder(ID, subresourceID);
    }
    private okhttp3.Call getFeedbackEventsCall(String ID, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workers/{ID}/anytimeFeedbackEvents"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFeedbackEventsValidateBeforeCall(String ID, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getFeedbackEvents(Async)");
        }

        return getFeedbackEventsCall(ID, limit, offset, _callback);

    }


    private ApiResponse<WorkersGetFeedbackEventsResponse> getFeedbackEventsWithHttpInfo(String ID, Long limit, Long offset) throws ApiException {
        okhttp3.Call localVarCall = getFeedbackEventsValidateBeforeCall(ID, limit, offset, null);
        Type localVarReturnType = new TypeToken<WorkersGetFeedbackEventsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFeedbackEventsAsync(String ID, Long limit, Long offset, final ApiCallback<WorkersGetFeedbackEventsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFeedbackEventsValidateBeforeCall(ID, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<WorkersGetFeedbackEventsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetFeedbackEventsRequestBuilder {
        private final String ID;
        private Long limit;
        private Long offset;

        private GetFeedbackEventsRequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default is 20. The maximum is 100. (optional)
         * @return GetFeedbackEventsRequestBuilder
         */
        public GetFeedbackEventsRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetFeedbackEventsRequestBuilder
         */
        public GetFeedbackEventsRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getFeedbackEvents
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFeedbackEventsCall(ID, limit, offset, _callback);
        }


        /**
         * Execute getFeedbackEvents request
         * @return WorkersGetFeedbackEventsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public WorkersGetFeedbackEventsResponse execute() throws ApiException {
            ApiResponse<WorkersGetFeedbackEventsResponse> localVarResp = getFeedbackEventsWithHttpInfo(ID, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getFeedbackEvents request with HTTP info returned
         * @return ApiResponse&lt;WorkersGetFeedbackEventsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkersGetFeedbackEventsResponse> executeWithHttpInfo() throws ApiException {
            return getFeedbackEventsWithHttpInfo(ID, limit, offset);
        }

        /**
         * Execute getFeedbackEvents request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkersGetFeedbackEventsResponse> _callback) throws ApiException {
            return getFeedbackEventsAsync(ID, limit, offset, _callback);
        }
    }

    /**
     * Retrieves a collection of feedback given events about the specified worker.
     * Retrieves all feedback given events about the specified worker. Could also return a feedback multiple recipient event.  This endpoint is equivalent to the View Feedback task in Workday.  Secured by: Self-Service: Anytime Feedback, Worker Data: Anytime Feedback  Scope: Performance Enablement, Worker Profile and Skills
     * @param ID The Workday ID of the resource. (required)
     * @return GetFeedbackEventsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetFeedbackEventsRequestBuilder getFeedbackEvents(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new GetFeedbackEventsRequestBuilder(ID);
    }
    private okhttp3.Call getGoalsCall(String ID, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workers/{ID}/goals"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGoalsValidateBeforeCall(String ID, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getGoals(Async)");
        }

        return getGoalsCall(ID, limit, offset, _callback);

    }


    private ApiResponse<WorkersGetGoalsResponse> getGoalsWithHttpInfo(String ID, Long limit, Long offset) throws ApiException {
        okhttp3.Call localVarCall = getGoalsValidateBeforeCall(ID, limit, offset, null);
        Type localVarReturnType = new TypeToken<WorkersGetGoalsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getGoalsAsync(String ID, Long limit, Long offset, final ApiCallback<WorkersGetGoalsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGoalsValidateBeforeCall(ID, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<WorkersGetGoalsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetGoalsRequestBuilder {
        private final String ID;
        private Long limit;
        private Long offset;

        private GetGoalsRequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default is 20. The maximum is 100. (optional)
         * @return GetGoalsRequestBuilder
         */
        public GetGoalsRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetGoalsRequestBuilder
         */
        public GetGoalsRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getGoals
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getGoalsCall(ID, limit, offset, _callback);
        }


        /**
         * Execute getGoals request
         * @return WorkersGetGoalsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public WorkersGetGoalsResponse execute() throws ApiException {
            ApiResponse<WorkersGetGoalsResponse> localVarResp = getGoalsWithHttpInfo(ID, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getGoals request with HTTP info returned
         * @return ApiResponse&lt;WorkersGetGoalsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkersGetGoalsResponse> executeWithHttpInfo() throws ApiException {
            return getGoalsWithHttpInfo(ID, limit, offset);
        }

        /**
         * Execute getGoals request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkersGetGoalsResponse> _callback) throws ApiException {
            return getGoalsAsync(ID, limit, offset, _callback);
        }
    }

    /**
     * Retrieves a collection of goals for a specific worker.
     * Retrieves all goals for a worker with the specified ID. You can use a returned id from GET /workers in the Staffing service. The goal data includes name, description, category, tags, associated reviews, due date, completed date, status, creator, worker it is for, supporting organization goal, locked reason, and activity streamable item.  Secured by: Self-Service: Employee Goals, Worker Data: Employee Goals  Scope: Performance Enablement
     * @param ID The Workday ID of the resource. (required)
     * @return GetGoalsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetGoalsRequestBuilder getGoals(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new GetGoalsRequestBuilder(ID);
    }
    private okhttp3.Call getRequestedEventCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workers/{ID}/requestedFeedbackOnWorkerEvents/{subresourceID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRequestedEventValidateBeforeCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getRequestedEvent(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling getRequestedEvent(Async)");
        }

        return getRequestedEventCall(ID, subresourceID, _callback);

    }


    private ApiResponse<RequestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000> getRequestedEventWithHttpInfo(String ID, String subresourceID) throws ApiException {
        okhttp3.Call localVarCall = getRequestedEventValidateBeforeCall(ID, subresourceID, null);
        Type localVarReturnType = new TypeToken<RequestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRequestedEventAsync(String ID, String subresourceID, final ApiCallback<RequestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRequestedEventValidateBeforeCall(ID, subresourceID, _callback);
        Type localVarReturnType = new TypeToken<RequestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRequestedEventRequestBuilder {
        private final String ID;
        private final String subresourceID;

        private GetRequestedEventRequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Build call for getRequestedEvent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRequestedEventCall(ID, subresourceID, _callback);
        }


        /**
         * Execute getRequestedEvent request
         * @return RequestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public RequestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000 execute() throws ApiException {
            ApiResponse<RequestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000> localVarResp = getRequestedEventWithHttpInfo(ID, subresourceID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRequestedEvent request with HTTP info returned
         * @return ApiResponse&lt;RequestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RequestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000> executeWithHttpInfo() throws ApiException {
            return getRequestedEventWithHttpInfo(ID, subresourceID);
        }

        /**
         * Execute getRequestedEvent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RequestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000> _callback) throws ApiException {
            return getRequestedEventAsync(ID, subresourceID, _callback);
        }
    }

    /**
     * Retrieves a single requested feedback event instance for the specified worker.
     * Retrieves a single requested feedback event instance for the specified worker. This endpoint is equivalent to the View Feedback and View Feedback by Request tasks in Workday.  Secured by: Self-Service: Role Requested Feedback, Worker Data: Role Requested Feedback  Scope: Performance Enablement, Worker Profile and Skills
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @return GetRequestedEventRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetRequestedEventRequestBuilder getRequestedEvent(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new GetRequestedEventRequestBuilder(ID, subresourceID);
    }
    private okhttp3.Call getRequestedFeedbackEventsCall(String ID, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workers/{ID}/requestedFeedbackOnWorkerEvents"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRequestedFeedbackEventsValidateBeforeCall(String ID, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getRequestedFeedbackEvents(Async)");
        }

        return getRequestedFeedbackEventsCall(ID, limit, offset, _callback);

    }


    private ApiResponse<WorkersGetRequestedFeedbackEventsResponse> getRequestedFeedbackEventsWithHttpInfo(String ID, Long limit, Long offset) throws ApiException {
        okhttp3.Call localVarCall = getRequestedFeedbackEventsValidateBeforeCall(ID, limit, offset, null);
        Type localVarReturnType = new TypeToken<WorkersGetRequestedFeedbackEventsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRequestedFeedbackEventsAsync(String ID, Long limit, Long offset, final ApiCallback<WorkersGetRequestedFeedbackEventsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRequestedFeedbackEventsValidateBeforeCall(ID, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<WorkersGetRequestedFeedbackEventsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRequestedFeedbackEventsRequestBuilder {
        private final String ID;
        private Long limit;
        private Long offset;

        private GetRequestedFeedbackEventsRequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default is 20. The maximum is 100. (optional)
         * @return GetRequestedFeedbackEventsRequestBuilder
         */
        public GetRequestedFeedbackEventsRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetRequestedFeedbackEventsRequestBuilder
         */
        public GetRequestedFeedbackEventsRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getRequestedFeedbackEvents
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRequestedFeedbackEventsCall(ID, limit, offset, _callback);
        }


        /**
         * Execute getRequestedFeedbackEvents request
         * @return WorkersGetRequestedFeedbackEventsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public WorkersGetRequestedFeedbackEventsResponse execute() throws ApiException {
            ApiResponse<WorkersGetRequestedFeedbackEventsResponse> localVarResp = getRequestedFeedbackEventsWithHttpInfo(ID, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRequestedFeedbackEvents request with HTTP info returned
         * @return ApiResponse&lt;WorkersGetRequestedFeedbackEventsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkersGetRequestedFeedbackEventsResponse> executeWithHttpInfo() throws ApiException {
            return getRequestedFeedbackEventsWithHttpInfo(ID, limit, offset);
        }

        /**
         * Execute getRequestedFeedbackEvents request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkersGetRequestedFeedbackEventsResponse> _callback) throws ApiException {
            return getRequestedFeedbackEventsAsync(ID, limit, offset, _callback);
        }
    }

    /**
     * Retrieves a collection of requested feedback events for the specified worker.
     * Retrieves all requested feedback events for the specified worker. This endpoint is equivalent to the View Feedback task in Workday.  Secured by: Self-Service: Role Requested Feedback, Worker Data: Role Requested Feedback  Scope: Performance Enablement, Worker Profile and Skills
     * @param ID The Workday ID of the resource. (required)
     * @return GetRequestedFeedbackEventsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetRequestedFeedbackEventsRequestBuilder getRequestedFeedbackEvents(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new GetRequestedFeedbackEventsRequestBuilder(ID);
    }
    private okhttp3.Call getSelfRequestedFeedbackCall(String ID, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workers/{ID}/requestedFeedbackOnSelfEvents"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfRequestedFeedbackValidateBeforeCall(String ID, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getSelfRequestedFeedback(Async)");
        }

        return getSelfRequestedFeedbackCall(ID, limit, offset, _callback);

    }


    private ApiResponse<WorkersGetSelfRequestedFeedbackResponse> getSelfRequestedFeedbackWithHttpInfo(String ID, Long limit, Long offset) throws ApiException {
        okhttp3.Call localVarCall = getSelfRequestedFeedbackValidateBeforeCall(ID, limit, offset, null);
        Type localVarReturnType = new TypeToken<WorkersGetSelfRequestedFeedbackResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSelfRequestedFeedbackAsync(String ID, Long limit, Long offset, final ApiCallback<WorkersGetSelfRequestedFeedbackResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfRequestedFeedbackValidateBeforeCall(ID, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<WorkersGetSelfRequestedFeedbackResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSelfRequestedFeedbackRequestBuilder {
        private final String ID;
        private Long limit;
        private Long offset;

        private GetSelfRequestedFeedbackRequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default is 20. The maximum is 100. (optional)
         * @return GetSelfRequestedFeedbackRequestBuilder
         */
        public GetSelfRequestedFeedbackRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetSelfRequestedFeedbackRequestBuilder
         */
        public GetSelfRequestedFeedbackRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getSelfRequestedFeedback
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSelfRequestedFeedbackCall(ID, limit, offset, _callback);
        }


        /**
         * Execute getSelfRequestedFeedback request
         * @return WorkersGetSelfRequestedFeedbackResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public WorkersGetSelfRequestedFeedbackResponse execute() throws ApiException {
            ApiResponse<WorkersGetSelfRequestedFeedbackResponse> localVarResp = getSelfRequestedFeedbackWithHttpInfo(ID, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSelfRequestedFeedback request with HTTP info returned
         * @return ApiResponse&lt;WorkersGetSelfRequestedFeedbackResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkersGetSelfRequestedFeedbackResponse> executeWithHttpInfo() throws ApiException {
            return getSelfRequestedFeedbackWithHttpInfo(ID, limit, offset);
        }

        /**
         * Execute getSelfRequestedFeedback request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkersGetSelfRequestedFeedbackResponse> _callback) throws ApiException {
            return getSelfRequestedFeedbackAsync(ID, limit, offset, _callback);
        }
    }

    /**
     * Retrieves a collection of self-requested feedback events for the specified worker.
     * Retrieves all self-requested feedback events for the specified worker. This endpoint is equivalent to the View Feedback task in Workday.  Secured by: Self-Service: Self Requested Feedback, Worker Data: Self Requested Feedback  Scope: Performance Enablement, Worker Profile and Skills
     * @param ID The Workday ID of the resource. (required)
     * @return GetSelfRequestedFeedbackRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetSelfRequestedFeedbackRequestBuilder getSelfRequestedFeedback(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new GetSelfRequestedFeedbackRequestBuilder(ID);
    }
    private okhttp3.Call getSelfRequestedFeedbackEventCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workers/{ID}/requestedFeedbackOnSelfEvents/{subresourceID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfRequestedFeedbackEventValidateBeforeCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getSelfRequestedFeedbackEvent(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling getSelfRequestedFeedbackEvent(Async)");
        }

        return getSelfRequestedFeedbackEventCall(ID, subresourceID, _callback);

    }


    private ApiResponse<RequestedFeedbackOnSelfEventDetail19acce0101b310002e6bf03e1bbc0000> getSelfRequestedFeedbackEventWithHttpInfo(String ID, String subresourceID) throws ApiException {
        okhttp3.Call localVarCall = getSelfRequestedFeedbackEventValidateBeforeCall(ID, subresourceID, null);
        Type localVarReturnType = new TypeToken<RequestedFeedbackOnSelfEventDetail19acce0101b310002e6bf03e1bbc0000>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSelfRequestedFeedbackEventAsync(String ID, String subresourceID, final ApiCallback<RequestedFeedbackOnSelfEventDetail19acce0101b310002e6bf03e1bbc0000> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfRequestedFeedbackEventValidateBeforeCall(ID, subresourceID, _callback);
        Type localVarReturnType = new TypeToken<RequestedFeedbackOnSelfEventDetail19acce0101b310002e6bf03e1bbc0000>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSelfRequestedFeedbackEventRequestBuilder {
        private final String ID;
        private final String subresourceID;

        private GetSelfRequestedFeedbackEventRequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Build call for getSelfRequestedFeedbackEvent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSelfRequestedFeedbackEventCall(ID, subresourceID, _callback);
        }


        /**
         * Execute getSelfRequestedFeedbackEvent request
         * @return RequestedFeedbackOnSelfEventDetail19acce0101b310002e6bf03e1bbc0000
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public RequestedFeedbackOnSelfEventDetail19acce0101b310002e6bf03e1bbc0000 execute() throws ApiException {
            ApiResponse<RequestedFeedbackOnSelfEventDetail19acce0101b310002e6bf03e1bbc0000> localVarResp = getSelfRequestedFeedbackEventWithHttpInfo(ID, subresourceID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSelfRequestedFeedbackEvent request with HTTP info returned
         * @return ApiResponse&lt;RequestedFeedbackOnSelfEventDetail19acce0101b310002e6bf03e1bbc0000&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RequestedFeedbackOnSelfEventDetail19acce0101b310002e6bf03e1bbc0000> executeWithHttpInfo() throws ApiException {
            return getSelfRequestedFeedbackEventWithHttpInfo(ID, subresourceID);
        }

        /**
         * Execute getSelfRequestedFeedbackEvent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RequestedFeedbackOnSelfEventDetail19acce0101b310002e6bf03e1bbc0000> _callback) throws ApiException {
            return getSelfRequestedFeedbackEventAsync(ID, subresourceID, _callback);
        }
    }

    /**
     * Retrieves a single self-requested feedback event instance for the specified worker.
     * Retrieves a single self-requested feedback event instance for the specified worker. This endpoint is equivalent to the View Feedback and View Feedback by Request tasks in Workday.  Secured by: Self-Service: Self Requested Feedback, Worker Data: Self Requested Feedback  Scope: Performance Enablement, Worker Profile and Skills
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @return GetSelfRequestedFeedbackEventRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetSelfRequestedFeedbackEventRequestBuilder getSelfRequestedFeedbackEvent(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new GetSelfRequestedFeedbackEventRequestBuilder(ID, subresourceID);
    }
    private okhttp3.Call getSingleGoalCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workers/{ID}/goals/{subresourceID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSingleGoalValidateBeforeCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getSingleGoal(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling getSingleGoal(Async)");
        }

        return getSingleGoalCall(ID, subresourceID, _callback);

    }


    private ApiResponse<GoalsSummary2c793e888bcd100033e663075a2b0000> getSingleGoalWithHttpInfo(String ID, String subresourceID) throws ApiException {
        okhttp3.Call localVarCall = getSingleGoalValidateBeforeCall(ID, subresourceID, null);
        Type localVarReturnType = new TypeToken<GoalsSummary2c793e888bcd100033e663075a2b0000>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSingleGoalAsync(String ID, String subresourceID, final ApiCallback<GoalsSummary2c793e888bcd100033e663075a2b0000> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSingleGoalValidateBeforeCall(ID, subresourceID, _callback);
        Type localVarReturnType = new TypeToken<GoalsSummary2c793e888bcd100033e663075a2b0000>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSingleGoalRequestBuilder {
        private final String ID;
        private final String subresourceID;

        private GetSingleGoalRequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Build call for getSingleGoal
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSingleGoalCall(ID, subresourceID, _callback);
        }


        /**
         * Execute getSingleGoal request
         * @return GoalsSummary2c793e888bcd100033e663075a2b0000
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public GoalsSummary2c793e888bcd100033e663075a2b0000 execute() throws ApiException {
            ApiResponse<GoalsSummary2c793e888bcd100033e663075a2b0000> localVarResp = getSingleGoalWithHttpInfo(ID, subresourceID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSingleGoal request with HTTP info returned
         * @return ApiResponse&lt;GoalsSummary2c793e888bcd100033e663075a2b0000&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GoalsSummary2c793e888bcd100033e663075a2b0000> executeWithHttpInfo() throws ApiException {
            return getSingleGoalWithHttpInfo(ID, subresourceID);
        }

        /**
         * Execute getSingleGoal request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GoalsSummary2c793e888bcd100033e663075a2b0000> _callback) throws ApiException {
            return getSingleGoalAsync(ID, subresourceID, _callback);
        }
    }

    /**
     * Retrieves a single goal instance for a specific worker.
     * Retrieves a single goal instance for a worker with the specified ID. The goal data includes name, description, category, tags, associated reviews, due date, completed date, status, creator, worker it is for, supporting organization goal, locked reason, and activity streamable item.  Secured by: Self-Service: Employee Goals, Worker Data: Employee Goals  Scope: Performance Enablement
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @return GetSingleGoalRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetSingleGoalRequestBuilder getSingleGoal(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new GetSingleGoalRequestBuilder(ID, subresourceID);
    }
    private okhttp3.Call getStaffingInformationCall(String ID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workers/{ID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStaffingInformationValidateBeforeCall(String ID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getStaffingInformation(Async)");
        }

        return getStaffingInformationCall(ID, _callback);

    }


    private ApiResponse<WorkerDataC2466b0778c610000d1936006720000e> getStaffingInformationWithHttpInfo(String ID) throws ApiException {
        okhttp3.Call localVarCall = getStaffingInformationValidateBeforeCall(ID, null);
        Type localVarReturnType = new TypeToken<WorkerDataC2466b0778c610000d1936006720000e>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getStaffingInformationAsync(String ID, final ApiCallback<WorkerDataC2466b0778c610000d1936006720000e> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStaffingInformationValidateBeforeCall(ID, _callback);
        Type localVarReturnType = new TypeToken<WorkerDataC2466b0778c610000d1936006720000e>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetStaffingInformationRequestBuilder {
        private final String ID;

        private GetStaffingInformationRequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Build call for getStaffingInformation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getStaffingInformationCall(ID, _callback);
        }


        /**
         * Execute getStaffingInformation request
         * @return WorkerDataC2466b0778c610000d1936006720000e
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public WorkerDataC2466b0778c610000d1936006720000e execute() throws ApiException {
            ApiResponse<WorkerDataC2466b0778c610000d1936006720000e> localVarResp = getStaffingInformationWithHttpInfo(ID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getStaffingInformation request with HTTP info returned
         * @return ApiResponse&lt;WorkerDataC2466b0778c610000d1936006720000e&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkerDataC2466b0778c610000d1936006720000e> executeWithHttpInfo() throws ApiException {
            return getStaffingInformationWithHttpInfo(ID);
        }

        /**
         * Execute getStaffingInformation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkerDataC2466b0778c610000d1936006720000e> _callback) throws ApiException {
            return getStaffingInformationAsync(ID, _callback);
        }
    }

    /**
     * Retrieves a collection of workers and current staffing information.
     * Retrieves a collection of workers and current staffing information.  Secured by: Self-Service: Current Staffing Information, Worker Data: Public Worker Reports  Scope: Staffing
     * @param ID The Workday ID of the resource. (required)
     * @return GetStaffingInformationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetStaffingInformationRequestBuilder getStaffingInformation(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new GetStaffingInformationRequestBuilder(ID);
    }
    private okhttp3.Call requestFeedbackOnSelfEventsCall(String ID, RequestedFeedbackOnSelfEventDetail19acce0101b310002e6bf03e1bbc0000 requestedFeedbackOnSelfEventDetail19acce0101b310002e6bf03e1bbc0000, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestedFeedbackOnSelfEventDetail19acce0101b310002e6bf03e1bbc0000;

        // create path and map variables
        String localVarPath = "/workers/{ID}/requestedFeedbackOnSelfEvents"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestFeedbackOnSelfEventsValidateBeforeCall(String ID, RequestedFeedbackOnSelfEventDetail19acce0101b310002e6bf03e1bbc0000 requestedFeedbackOnSelfEventDetail19acce0101b310002e6bf03e1bbc0000, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling requestFeedbackOnSelfEvents(Async)");
        }

        // verify the required parameter 'requestedFeedbackOnSelfEventDetail19acce0101b310002e6bf03e1bbc0000' is set
        if (requestedFeedbackOnSelfEventDetail19acce0101b310002e6bf03e1bbc0000 == null) {
            throw new ApiException("Missing the required parameter 'requestedFeedbackOnSelfEventDetail19acce0101b310002e6bf03e1bbc0000' when calling requestFeedbackOnSelfEvents(Async)");
        }

        return requestFeedbackOnSelfEventsCall(ID, requestedFeedbackOnSelfEventDetail19acce0101b310002e6bf03e1bbc0000, _callback);

    }


    private ApiResponse<RequestedFeedbackOnSelfEventDetail19acce0101b310002e6bf03e1bbc0000> requestFeedbackOnSelfEventsWithHttpInfo(String ID, RequestedFeedbackOnSelfEventDetail19acce0101b310002e6bf03e1bbc0000 requestedFeedbackOnSelfEventDetail19acce0101b310002e6bf03e1bbc0000) throws ApiException {
        okhttp3.Call localVarCall = requestFeedbackOnSelfEventsValidateBeforeCall(ID, requestedFeedbackOnSelfEventDetail19acce0101b310002e6bf03e1bbc0000, null);
        Type localVarReturnType = new TypeToken<RequestedFeedbackOnSelfEventDetail19acce0101b310002e6bf03e1bbc0000>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call requestFeedbackOnSelfEventsAsync(String ID, RequestedFeedbackOnSelfEventDetail19acce0101b310002e6bf03e1bbc0000 requestedFeedbackOnSelfEventDetail19acce0101b310002e6bf03e1bbc0000, final ApiCallback<RequestedFeedbackOnSelfEventDetail19acce0101b310002e6bf03e1bbc0000> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestFeedbackOnSelfEventsValidateBeforeCall(ID, requestedFeedbackOnSelfEventDetail19acce0101b310002e6bf03e1bbc0000, _callback);
        Type localVarReturnType = new TypeToken<RequestedFeedbackOnSelfEventDetail19acce0101b310002e6bf03e1bbc0000>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RequestFeedbackOnSelfEventsRequestBuilder {
        private final String ID;
        private BusinessProcessParameters4db9c44d36231000134c7a5b6f3b0000 businessProcessParameters;
        private List<RequestedFeedbackQuestionFfdd5de32f7f1000144df0c21e640000> feedbackQuestions;
        private FeedbackAbout4db9c44d36231000134c7b8eb3800003 feedbackAbout;
        private FeedbackTemplate4db9c44d36231000134c7b8eb3800000 feedbackTemplate;
        private LocalDate expirationDate;
        private LocalDate requestDate;
        private String feedbackOverallStatus;
        private Boolean feedbackPrivate;
        private List<FeedbackRespondersFfdd5de32f7f100016dbb1b188d70000> feedbackResponders;
        private Boolean showFeedbackProviderName;
        private String descriptor;
        private String id;

        private RequestFeedbackOnSelfEventsRequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Set businessProcessParameters
         * @param businessProcessParameters  (optional)
         * @return RequestFeedbackOnSelfEventsRequestBuilder
         */
        public RequestFeedbackOnSelfEventsRequestBuilder businessProcessParameters(BusinessProcessParameters4db9c44d36231000134c7a5b6f3b0000 businessProcessParameters) {
            this.businessProcessParameters = businessProcessParameters;
            return this;
        }
        
        /**
         * Set feedbackQuestions
         * @param feedbackQuestions Feedback questions used in requested feedback events. (optional)
         * @return RequestFeedbackOnSelfEventsRequestBuilder
         */
        public RequestFeedbackOnSelfEventsRequestBuilder feedbackQuestions(List<RequestedFeedbackQuestionFfdd5de32f7f1000144df0c21e640000> feedbackQuestions) {
            this.feedbackQuestions = feedbackQuestions;
            return this;
        }
        
        /**
         * Set feedbackAbout
         * @param feedbackAbout  (optional)
         * @return RequestFeedbackOnSelfEventsRequestBuilder
         */
        public RequestFeedbackOnSelfEventsRequestBuilder feedbackAbout(FeedbackAbout4db9c44d36231000134c7b8eb3800003 feedbackAbout) {
            this.feedbackAbout = feedbackAbout;
            return this;
        }
        
        /**
         * Set feedbackTemplate
         * @param feedbackTemplate  (optional)
         * @return RequestFeedbackOnSelfEventsRequestBuilder
         */
        public RequestFeedbackOnSelfEventsRequestBuilder feedbackTemplate(FeedbackTemplate4db9c44d36231000134c7b8eb3800000 feedbackTemplate) {
            this.feedbackTemplate = feedbackTemplate;
            return this;
        }
        
        /**
         * Set expirationDate
         * @param expirationDate The date the feedback request expires. (optional)
         * @return RequestFeedbackOnSelfEventsRequestBuilder
         */
        public RequestFeedbackOnSelfEventsRequestBuilder expirationDate(LocalDate expirationDate) {
            this.expirationDate = expirationDate;
            return this;
        }
        
        /**
         * Set requestDate
         * @param requestDate The date the feedback request was initiated. (optional)
         * @return RequestFeedbackOnSelfEventsRequestBuilder
         */
        public RequestFeedbackOnSelfEventsRequestBuilder requestDate(LocalDate requestDate) {
            this.requestDate = requestDate;
            return this;
        }
        
        /**
         * Set feedbackOverallStatus
         * @param feedbackOverallStatus Overall status of the requested feedback process. (optional)
         * @return RequestFeedbackOnSelfEventsRequestBuilder
         */
        public RequestFeedbackOnSelfEventsRequestBuilder feedbackOverallStatus(String feedbackOverallStatus) {
            this.feedbackOverallStatus = feedbackOverallStatus;
            return this;
        }
        
        /**
         * Set feedbackPrivate
         * @param feedbackPrivate Private feedback between the feedback provider and the worker. Private feedback isn&#39;t shared with managers. (optional)
         * @return RequestFeedbackOnSelfEventsRequestBuilder
         */
        public RequestFeedbackOnSelfEventsRequestBuilder feedbackPrivate(Boolean feedbackPrivate) {
            this.feedbackPrivate = feedbackPrivate;
            return this;
        }
        
        /**
         * Set feedbackResponders
         * @param feedbackResponders The respondents who&#39;ve been requested to provide feedback. (optional)
         * @return RequestFeedbackOnSelfEventsRequestBuilder
         */
        public RequestFeedbackOnSelfEventsRequestBuilder feedbackResponders(List<FeedbackRespondersFfdd5de32f7f100016dbb1b188d70000> feedbackResponders) {
            this.feedbackResponders = feedbackResponders;
            return this;
        }
        
        /**
         * Set showFeedbackProviderName
         * @param showFeedbackProviderName Whether to display the name of the responders or have them remain anonymous. (optional)
         * @return RequestFeedbackOnSelfEventsRequestBuilder
         */
        public RequestFeedbackOnSelfEventsRequestBuilder showFeedbackProviderName(Boolean showFeedbackProviderName) {
            this.showFeedbackProviderName = showFeedbackProviderName;
            return this;
        }
        
        /**
         * Set descriptor
         * @param descriptor A preview of the instance (optional)
         * @return RequestFeedbackOnSelfEventsRequestBuilder
         */
        public RequestFeedbackOnSelfEventsRequestBuilder descriptor(String descriptor) {
            this.descriptor = descriptor;
            return this;
        }
        
        /**
         * Set id
         * @param id Id of the instance (optional)
         * @return RequestFeedbackOnSelfEventsRequestBuilder
         */
        public RequestFeedbackOnSelfEventsRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Build call for requestFeedbackOnSelfEvents
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            RequestedFeedbackOnSelfEventDetail19acce0101b310002e6bf03e1bbc0000 requestedFeedbackOnSelfEventDetail19acce0101b310002e6bf03e1bbc0000 = buildBodyParams();
            return requestFeedbackOnSelfEventsCall(ID, requestedFeedbackOnSelfEventDetail19acce0101b310002e6bf03e1bbc0000, _callback);
        }

        private RequestedFeedbackOnSelfEventDetail19acce0101b310002e6bf03e1bbc0000 buildBodyParams() {
            RequestedFeedbackOnSelfEventDetail19acce0101b310002e6bf03e1bbc0000 requestedFeedbackOnSelfEventDetail19acce0101b310002e6bf03e1bbc0000 = new RequestedFeedbackOnSelfEventDetail19acce0101b310002e6bf03e1bbc0000();
            return requestedFeedbackOnSelfEventDetail19acce0101b310002e6bf03e1bbc0000;
        }

        /**
         * Execute requestFeedbackOnSelfEvents request
         * @return RequestedFeedbackOnSelfEventDetail19acce0101b310002e6bf03e1bbc0000
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public RequestedFeedbackOnSelfEventDetail19acce0101b310002e6bf03e1bbc0000 execute() throws ApiException {
            RequestedFeedbackOnSelfEventDetail19acce0101b310002e6bf03e1bbc0000 requestedFeedbackOnSelfEventDetail19acce0101b310002e6bf03e1bbc0000 = buildBodyParams();
            ApiResponse<RequestedFeedbackOnSelfEventDetail19acce0101b310002e6bf03e1bbc0000> localVarResp = requestFeedbackOnSelfEventsWithHttpInfo(ID, requestedFeedbackOnSelfEventDetail19acce0101b310002e6bf03e1bbc0000);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute requestFeedbackOnSelfEvents request with HTTP info returned
         * @return ApiResponse&lt;RequestedFeedbackOnSelfEventDetail19acce0101b310002e6bf03e1bbc0000&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RequestedFeedbackOnSelfEventDetail19acce0101b310002e6bf03e1bbc0000> executeWithHttpInfo() throws ApiException {
            RequestedFeedbackOnSelfEventDetail19acce0101b310002e6bf03e1bbc0000 requestedFeedbackOnSelfEventDetail19acce0101b310002e6bf03e1bbc0000 = buildBodyParams();
            return requestFeedbackOnSelfEventsWithHttpInfo(ID, requestedFeedbackOnSelfEventDetail19acce0101b310002e6bf03e1bbc0000);
        }

        /**
         * Execute requestFeedbackOnSelfEvents request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RequestedFeedbackOnSelfEventDetail19acce0101b310002e6bf03e1bbc0000> _callback) throws ApiException {
            RequestedFeedbackOnSelfEventDetail19acce0101b310002e6bf03e1bbc0000 requestedFeedbackOnSelfEventDetail19acce0101b310002e6bf03e1bbc0000 = buildBodyParams();
            return requestFeedbackOnSelfEventsAsync(ID, requestedFeedbackOnSelfEventDetail19acce0101b310002e6bf03e1bbc0000, _callback);
        }
    }

    /**
     * 
     * Secured by: Get Feedback on Self REST+TG  Scope: Performance Enablement, Worker Profile and Skills
     * @param ID The Workday ID of the resource. (required)
     * @param requestedFeedbackOnSelfEventDetail19acce0101b310002e6bf03e1bbc0000  (required)
     * @return RequestFeedbackOnSelfEventsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public RequestFeedbackOnSelfEventsRequestBuilder requestFeedbackOnSelfEvents(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new RequestFeedbackOnSelfEventsRequestBuilder(ID);
    }
    private okhttp3.Call requestFeedbackOnWorkerEventsCall(String ID, RequestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000 requestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000;

        // create path and map variables
        String localVarPath = "/workers/{ID}/requestedFeedbackOnWorkerEvents"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestFeedbackOnWorkerEventsValidateBeforeCall(String ID, RequestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000 requestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling requestFeedbackOnWorkerEvents(Async)");
        }

        // verify the required parameter 'requestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000' is set
        if (requestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000 == null) {
            throw new ApiException("Missing the required parameter 'requestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000' when calling requestFeedbackOnWorkerEvents(Async)");
        }

        return requestFeedbackOnWorkerEventsCall(ID, requestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000, _callback);

    }


    private ApiResponse<RequestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000> requestFeedbackOnWorkerEventsWithHttpInfo(String ID, RequestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000 requestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000) throws ApiException {
        okhttp3.Call localVarCall = requestFeedbackOnWorkerEventsValidateBeforeCall(ID, requestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000, null);
        Type localVarReturnType = new TypeToken<RequestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call requestFeedbackOnWorkerEventsAsync(String ID, RequestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000 requestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000, final ApiCallback<RequestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestFeedbackOnWorkerEventsValidateBeforeCall(ID, requestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000, _callback);
        Type localVarReturnType = new TypeToken<RequestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RequestFeedbackOnWorkerEventsRequestBuilder {
        private final String ID;
        private FeedbackAbout2b4c8a6ca069100035b85907ae2c0002 feedbackAbout;
        private Boolean feedbackConfidential;
        private String feedbackOverallStatus;
        private Boolean showFeedbackProviderName;
        private LocalDate requestDate;
        private LocalDate expirationDate;
        private List<RequestedFeedbackQuestionFfdd5de32f7f1000144df0c21e640000> feedbackQuestions;
        private FeedbackTemplate2b4c8a6ca069100035b859a141200001 feedbackTemplate;
        private List<FeedbackRespondersFfdd5de32f7f100016dbb1b188d70000> feedbackResponders;
        private BusinessProcessParameters2b4c8a6ca069100035b85907ae2c0000 businessProcessParameters;
        private String descriptor;
        private String id;

        private RequestFeedbackOnWorkerEventsRequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Set feedbackAbout
         * @param feedbackAbout  (optional)
         * @return RequestFeedbackOnWorkerEventsRequestBuilder
         */
        public RequestFeedbackOnWorkerEventsRequestBuilder feedbackAbout(FeedbackAbout2b4c8a6ca069100035b85907ae2c0002 feedbackAbout) {
            this.feedbackAbout = feedbackAbout;
            return this;
        }
        
        /**
         * Set feedbackConfidential
         * @param feedbackConfidential Yes if the feedback is confidential between the feedback provider and the manager. Workers don&#39;t see confidential feedback. (optional)
         * @return RequestFeedbackOnWorkerEventsRequestBuilder
         */
        public RequestFeedbackOnWorkerEventsRequestBuilder feedbackConfidential(Boolean feedbackConfidential) {
            this.feedbackConfidential = feedbackConfidential;
            return this;
        }
        
        /**
         * Set feedbackOverallStatus
         * @param feedbackOverallStatus Overall status of the requested feedback process. (optional)
         * @return RequestFeedbackOnWorkerEventsRequestBuilder
         */
        public RequestFeedbackOnWorkerEventsRequestBuilder feedbackOverallStatus(String feedbackOverallStatus) {
            this.feedbackOverallStatus = feedbackOverallStatus;
            return this;
        }
        
        /**
         * Set showFeedbackProviderName
         * @param showFeedbackProviderName Whether to display the name of the responders or have them remain anonymous.ccc (optional)
         * @return RequestFeedbackOnWorkerEventsRequestBuilder
         */
        public RequestFeedbackOnWorkerEventsRequestBuilder showFeedbackProviderName(Boolean showFeedbackProviderName) {
            this.showFeedbackProviderName = showFeedbackProviderName;
            return this;
        }
        
        /**
         * Set requestDate
         * @param requestDate The date the feedback request was initiated. (optional)
         * @return RequestFeedbackOnWorkerEventsRequestBuilder
         */
        public RequestFeedbackOnWorkerEventsRequestBuilder requestDate(LocalDate requestDate) {
            this.requestDate = requestDate;
            return this;
        }
        
        /**
         * Set expirationDate
         * @param expirationDate The date the feedback request expires. (optional)
         * @return RequestFeedbackOnWorkerEventsRequestBuilder
         */
        public RequestFeedbackOnWorkerEventsRequestBuilder expirationDate(LocalDate expirationDate) {
            this.expirationDate = expirationDate;
            return this;
        }
        
        /**
         * Set feedbackQuestions
         * @param feedbackQuestions Feedback questions used in requested feedback events. (optional)
         * @return RequestFeedbackOnWorkerEventsRequestBuilder
         */
        public RequestFeedbackOnWorkerEventsRequestBuilder feedbackQuestions(List<RequestedFeedbackQuestionFfdd5de32f7f1000144df0c21e640000> feedbackQuestions) {
            this.feedbackQuestions = feedbackQuestions;
            return this;
        }
        
        /**
         * Set feedbackTemplate
         * @param feedbackTemplate  (optional)
         * @return RequestFeedbackOnWorkerEventsRequestBuilder
         */
        public RequestFeedbackOnWorkerEventsRequestBuilder feedbackTemplate(FeedbackTemplate2b4c8a6ca069100035b859a141200001 feedbackTemplate) {
            this.feedbackTemplate = feedbackTemplate;
            return this;
        }
        
        /**
         * Set feedbackResponders
         * @param feedbackResponders The respondents who&#39;ve been requested to provide feedback. (optional)
         * @return RequestFeedbackOnWorkerEventsRequestBuilder
         */
        public RequestFeedbackOnWorkerEventsRequestBuilder feedbackResponders(List<FeedbackRespondersFfdd5de32f7f100016dbb1b188d70000> feedbackResponders) {
            this.feedbackResponders = feedbackResponders;
            return this;
        }
        
        /**
         * Set businessProcessParameters
         * @param businessProcessParameters  (optional)
         * @return RequestFeedbackOnWorkerEventsRequestBuilder
         */
        public RequestFeedbackOnWorkerEventsRequestBuilder businessProcessParameters(BusinessProcessParameters2b4c8a6ca069100035b85907ae2c0000 businessProcessParameters) {
            this.businessProcessParameters = businessProcessParameters;
            return this;
        }
        
        /**
         * Set descriptor
         * @param descriptor A preview of the instance (optional)
         * @return RequestFeedbackOnWorkerEventsRequestBuilder
         */
        public RequestFeedbackOnWorkerEventsRequestBuilder descriptor(String descriptor) {
            this.descriptor = descriptor;
            return this;
        }
        
        /**
         * Set id
         * @param id Id of the instance (optional)
         * @return RequestFeedbackOnWorkerEventsRequestBuilder
         */
        public RequestFeedbackOnWorkerEventsRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Build call for requestFeedbackOnWorkerEvents
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            RequestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000 requestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000 = buildBodyParams();
            return requestFeedbackOnWorkerEventsCall(ID, requestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000, _callback);
        }

        private RequestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000 buildBodyParams() {
            RequestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000 requestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000 = new RequestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000();
            return requestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000;
        }

        /**
         * Execute requestFeedbackOnWorkerEvents request
         * @return RequestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public RequestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000 execute() throws ApiException {
            RequestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000 requestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000 = buildBodyParams();
            ApiResponse<RequestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000> localVarResp = requestFeedbackOnWorkerEventsWithHttpInfo(ID, requestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute requestFeedbackOnWorkerEvents request with HTTP info returned
         * @return ApiResponse&lt;RequestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RequestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000> executeWithHttpInfo() throws ApiException {
            RequestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000 requestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000 = buildBodyParams();
            return requestFeedbackOnWorkerEventsWithHttpInfo(ID, requestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000);
        }

        /**
         * Execute requestFeedbackOnWorkerEvents request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RequestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000> _callback) throws ApiException {
            RequestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000 requestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000 = buildBodyParams();
            return requestFeedbackOnWorkerEventsAsync(ID, requestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000, _callback);
        }
    }

    /**
     * Not applicable.
     * Not applicable.  Secured by: Get Feedback on \\~Worker\\~ REST+TG  Scope: Performance Enablement, Worker Profile and Skills
     * @param ID The Workday ID of the resource. (required)
     * @param requestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000  (required)
     * @return RequestFeedbackOnWorkerEventsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public RequestFeedbackOnWorkerEventsRequestBuilder requestFeedbackOnWorkerEvents(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new RequestFeedbackOnWorkerEventsRequestBuilder(ID);
    }
}
