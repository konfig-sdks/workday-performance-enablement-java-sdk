/*
 * performanceEnablement
 * The Performance Management service enables applications to access and create feedback about workers in the system.
 *
 * The version of the OpenAPI document: v5
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.ERRORMODELREFERENCE;
import com.konfigthis.client.model.MULTIPLEINSTANCEMODELREFERENCE;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PromptValuesApi
 */
@Disabled
public class PromptValuesApiTest {

    private static PromptValuesApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new PromptValuesApi(apiClient);
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInstancesTest() throws ApiException {
        Long limit = null;
        Long offset = null;
        List<String> workers = null;
        MULTIPLEINSTANCEMODELREFERENCE response = api.getInstances()
                .limit(limit)
                .offset(offset)
                .workers(workers)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInstances_0Test() throws ApiException {
        Long limit = null;
        Long offset = null;
        String templateType = null;
        String worker = null;
        MULTIPLEINSTANCEMODELREFERENCE response = api.getInstances_0()
                .limit(limit)
                .offset(offset)
                .templateType(templateType)
                .worker(worker)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInstances_1Test() throws ApiException {
        Long limit = null;
        Long offset = null;
        MULTIPLEINSTANCEMODELREFERENCE response = api.getInstances_1()
                .limit(limit)
                .offset(offset)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInstances_2Test() throws ApiException {
        Long limit = null;
        Long offset = null;
        String templateType = null;
        String worker = null;
        MULTIPLEINSTANCEMODELREFERENCE response = api.getInstances_2()
                .limit(limit)
                .offset(offset)
                .templateType(templateType)
                .worker(worker)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInstances_3Test() throws ApiException {
        Long limit = null;
        Long offset = null;
        String relatesToTag = null;
        MULTIPLEINSTANCEMODELREFERENCE response = api.getInstances_3()
                .limit(limit)
                .offset(offset)
                .relatesToTag(relatesToTag)
                .execute();
        // TODO: test validations
    }

}
